// @version=5
indicator("Log Bollinger Bands %BB Oscillator [Krypt]", shorttitle="Log BB %B")


length=input.int(60, title="Length")
multiplier = input.float(3.1416, title="StdDev")
closePrice=input.source(close, title="Source")


price = math.log(closePrice)
stdDevOf_lnOf_price = ta.stdev(price, length)
num = price + multiplier * stdDevOf_lnOf_price - ta.sma(price, length)
bbWidth = 2 * multiplier * stdDevOf_lnOf_price
zScoreOf_lnOf_price = 2 * (num / bbWidth) - 1



offset = input(0, title="Offset")
src = math.log(input(close, type=source, title="Source"))

basis = ta.sma(src, length)
dev = multiplier * ta.stdev(src, length)
upper = basis + dev
lower = basis - dev



// ---------

emaOf_zScore = ta.ema(zScoreOf_lnOf_price, length)
maOf_zScore = ta.sma(zScoreOf_lnOf_price, length)


deltaOf_lnOf_price = price[0] - price[1]
deltaOf_zScoreOf_lnOf_price = zScoreOf_lnOf_price[0] - zScoreOf_lnOf_price[1]
deltaOf_ema = emaOf_zScore[0] - emaOf_zScore[1]

distanceOf_emaToMa = emaOf_zScore - maOf_zScore


inflators = ( 1 + math.abs(deltaOf_ema) ) * ( 1 + math.abs(deltaOf_lnOf_price) ) * ( 1 + math.abs(distanceOf_emaToMa) ) * ( 1 + math.abs(emaOf_zScore) ) * ( 1 + math.abs(maOf_zScore) ) * ( 1 + stdDevOf_lnOf_price)
deflators = math.abs(deltaOf_lnOf_price) * (stdDevOf_lnOf_price) * math.abs(emaOf_zScore) * math.abs(maOf_zScore) * math.abs(distanceOf_emaToMa)
positiveDeflators = math.abs(deflators)



productOf_deltasOf_ln_ema = deltaOf_lnOf_price * math.abs(deltaOf_ema)
deltaRatioOf_lnTo_ema = deltaOf_lnOf_price / math.abs(deltaOf_ema)

productOf_deltasOf_ln_emaToma = deltaOf_lnOf_price * math.abs(distanceOf_emaToMa)


invProp_deltaToStdDev = deltaOf_lnOf_price / stdDevOf_lnOf_price

plot(zScoreOf_lnOf_price, color=color.white, linewidth=1, title="Z-Score of ")

plot(maOf_zScore, color=#0000ff, title="Moving Average")
plot(emaOf_zScore, color=#00ffff, title="EMA of Z-Score")

emaOf_inflatedZScore = ta.ema( zScoreOf_lnOf_price * inflators, length) // stdDevOf_lnOf_price
plot(emaOf_inflatedZScore, color=color.green, title="EMA of Proportional Z-Score to StdDev Ratio", linewidth = 2)


prettyGoodTrendChangeDetector = ta.ema(ta.cum(distanceOf_emaToMa), length) - math.log(1 + math.abs(zScoreOf_lnOf_price)) * stdDevOf_lnOf_price
massaged_prettyGoodTrendChangeDetector_BTC = ta.ema(math.log(math.log(1 + math.abs(prettyGoodTrendChangeDetector))) * inflators, length)
massaged_prettyGoodTrendChangeDetector = ta.ema(math.exp(math.log(math.abs(prettyGoodTrendChangeDetector)) - 1) - 2, length)
plot(massaged_prettyGoodTrendChangeDetector_BTC, color=#ff00ff, title="(Massaged) Pretty Good Trend Change Detector")


logRatioOf_deltas_z_ema = math.log(math.abs(deltaOf_zScoreOf_lnOf_price)) / math.log(math.abs(deltaOf_ema))
negativeLogRatioOf_z_ema = -math.sign(deltaOf_zScoreOf_lnOf_price) * logRatioOf_deltas_z_ema
massaged_negativeLogRatioOf_z_ema = (ta.ema(math.exp(negativeLogRatioOf_z_ema) -1, length)) + emaOf_zScore + maOf_zScore
bakedUp_negativeLogRatioOf_z_ema = (massaged_negativeLogRatioOf_z_ema + emaOf_zScore + maOf_zScore) * inflators * stdDevOf_lnOf_price
watteredDownStew = ta.ema(bakedUp_negativeLogRatioOf_z_ema, 60)
plot(watteredDownStew, color=color.yellow, title="Massaged Negative LogRatio of Deltas: z, ema")

exponentialMultiplier = math.exp(emaOf_inflatedZScore * massaged_negativeLogRatioOf_z_ema * stdDevOf_lnOf_price * math.abs(maOf_zScore) * math.abs(emaOf_zScore))
sumOf_massagedIndicators = ( exponentialMultiplier * (massaged_prettyGoodTrendChangeDetector + massaged_negativeLogRatioOf_z_ema * inflators) * stdDevOf_lnOf_price )
bakingPowder = -math.log(math.abs(stdDevOf_lnOf_price))
smoothedOut_slappyMath = ta.ema( (ta.ema(sumOf_massagedIndicators, 19) + massaged_negativeLogRatioOf_z_ema), length)
plot((ta.ema(emaOf_inflatedZScore, length)) + (ta.ema(emaOf_inflatedZScore, 187)), color=#ff0000, title="Delta to Inflators")


logRatioOf_ema_ma = math.log(math.abs(emaOf_zScore)) / math.log(math.abs(maOf_zScore))
magnitudeDiffOf_ema_ma = math.abs(emaOf_zScore) - math.abs(maOf_zScore)
trendVisualizer1 = math.sign(magnitudeDiffOf_ema_ma) * logRatioOf_ema_ma //+ massaged_negativeLogRatioOf_z_ema + emaOf_inflatedZScore + emaOf_zScore + maOf_zScore + zScoreOf_lnOf_price
cookedUpIndicator = (math.exp(1 + trendVisualizer1) - math.e)
plot(ta.ema(cookedUpIndicator, length), color=color.orange, title="Cummulative Exponential-to-Simple-MA Delta times StdDev")

logRatioOf_ma_ema = math.log(math.abs(maOf_zScore)) / math.log(math.abs(emaOf_zScore))
magnitudeDiffOf_ma_ema = math.abs(maOf_zScore) - math.abs(emaOf_zScore)
trendVisualizer2 = math.sign(magnitudeDiffOf_ma_ema) * logRatioOf_ma_ema //+ massaged_negativeLogRatioOf_z_ema + emaOf_inflatedZScore + emaOf_zScore + maOf_zScore + zScoreOf_lnOf_price
cookedUpIndicator2 = (math.exp(1 + trendVisualizer2) - math.e)
plot(watteredDownStew * ta.ema(cookedUpIndicator + cookedUpIndicator2, length*2), color=color.gray, title="Cummulative Exponential-to-Simple-MA Delta times StdDev")
//plot((cookedUpIndicator), color=color.orange, title="Cummulative Exponential-to-Simple-MA Delta times StdDev")

zero=hline(0, color=#808080, linestyle = hline.style_dotted)
ob=hline(1, color=#c0c0c0)
os=hline(-1, color=#c0c0c0)
fill(ob, os, color=color.new(#138484, 90))