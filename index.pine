// @version=5
indicator("Log Bollinger Bands %BB Oscillator [Krypt]", shorttitle="Log BB %B")

length=input.int(187, title="Length")
lengthMA=input.int(187, title="MA Length")
multiplier = input.float(3.1416, title="StdDev")
src=input.source(close, title="Source")
showMA = input(false, title="Show Moving Average")

price = math.log(src)
stdDevOf_lnOf_price = ta.stdev(price, length)
num = price + multiplier * stdDevOf_lnOf_price - ta.sma(price, length)
bbWidth = 2 * multiplier * stdDevOf_lnOf_price
zScoreOf_lnOf_price = 2 * (num / bbWidth) - 1
emaOf_zScore = ta.ema(zScoreOf_lnOf_price, lengthMA)
// maOf_zScore = (ta.ema(num, lengthMA) / ta.ema(bbWidth, lengthMA) ) - 0.5
maOf_zScore = ta.sma(zScoreOf_lnOf_price, lengthMA)


zero=hline(0, color=#808080, linestyle = hline.style_dotted)
ob=hline(1, color=#c0c0c0)
os=hline(-1, color=#c0c0c0)
fill(ob, os, color=color.new(#138484, 90))



deltaOf_lnOf_price = price[0] - price[1]
deltaOf_zScoreOf_lnOf_price = zScoreOf_lnOf_price[0] - zScoreOf_lnOf_price[1]
deltaOf_ema = emaOf_zScore[0] - emaOf_zScore[1]

distanceOf_emaToMa = emaOf_zScore - maOf_zScore


inflators = ( 1 + math.abs(deltaOf_ema) ) * ( 1 + math.abs(deltaOf_lnOf_price) ) * ( 1 + math.abs(distanceOf_emaToMa) ) * ( 1 + math.abs(emaOf_zScore) ) * ( 1 + math.abs(maOf_zScore) ) * ( 1 + stdDevOf_lnOf_price)
deflators = math.abs(deltaOf_lnOf_price) * (stdDevOf_lnOf_price) * math.abs(emaOf_zScore) * math.abs(maOf_zScore) * math.abs(distanceOf_emaToMa)
positiveDeflators = math.abs(deflators)



productOf_deltasOf_ln_ema = deltaOf_lnOf_price * math.abs(deltaOf_ema)
deltaRatioOf_lnTo_ema = deltaOf_lnOf_price / math.abs(deltaOf_ema)

productOf_deltasOf_ln_emaToma = deltaOf_lnOf_price * math.abs(distanceOf_emaToMa)

// emaOf_inflatedZScore = ta.ema( ((zScoreOf_lnOf_price + emaOf_zScore) * (1+math.abs(emaOf_zScore-maOf_zScore)) / (1+stdDevOf_lnOf_price)) + zScoreOf_lnOf_price, 187) // lengthMA)
emaOf_inflatedZScore = ta.ema( zScoreOf_lnOf_price * inflators, lengthMA) // stdDevOf_lnOf_price

invProp_deltaToStdDev = deltaOf_lnOf_price / stdDevOf_lnOf_price

plot(zScoreOf_lnOf_price, color=color.white, linewidth=1, title="Z-Score of ")

plot(maOf_zScore, color=#0000ff, title="Moving Average")
plot(emaOf_zScore, color=#00ffff, title="EMA of Z-Score")

plot(emaOf_inflatedZScore, color=color.green, title="EMA of Proportional Z-Score to StdDev Ratio", linewidth = 2)


deltaRatioOf_zScore_emaToMa = -math.sign(deltaOf_zScoreOf_lnOf_price) * math.log(math.abs(deltaOf_zScoreOf_lnOf_price)) / math.log(math.abs(deltaOf_ema))
sumOf_massagedDeltaRatio_otherInflators = math.log(ta.ema(math.exp(deltaRatioOf_zScore_emaToMa) -1, lengthMA)) + zScoreOf_lnOf_price + emaOf_inflatedZScore * stdDevOf_lnOf_price + emaOf_zScore + maOf_zScore + 1
plot(sumOf_massagedDeltaRatio_otherInflators, color=color.yellow, title="Delta to Inflators")


relativeForce_reInflatedByStdDev = math.sign(math.abs(emaOf_zScore)) * math.log(math.abs(emaOf_zScore)) / math.log(math.abs(maOf_zScore) ) * stdDevOf_lnOf_price
cookedUpIndicator = sumOf_massagedDeltaRatio_otherInflators + relativeForce_reInflatedByStdDev + emaOf_inflatedZScore + emaOf_zScore + maOf_zScore + zScoreOf_lnOf_price
plot(cookedUpIndicator * stdDevOf_lnOf_price, color=color.orange, title="Cummulative Exponential-to-Simple-MA Delta times StdDev")


prettyGoodTrendChangeDetector = ta.ema(ta.cum(distanceOf_emaToMa), lengthMA) - math.log(1 + math.abs(zScoreOf_lnOf_price))
massaged_prettyGoodTrendChangeDetector = ta.ema(math.log(math.log(1 + math.abs(prettyGoodTrendChangeDetector))) * inflators, lengthMA)
plot(massaged_prettyGoodTrendChangeDetector, color=#ff00ff, title="(Massaged) Pretty Good Trend Change Detector")
